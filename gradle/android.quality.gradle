import com.github.spotbugs.snom.SpotBugsTask

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.2.4"
    }
}

apply plugin: "checkstyle"
apply plugin: "com.github.spotbugs-base"
apply plugin: 'jacoco'

checkstyle {
    toolVersion = "8.2"
    configFile = file("$rootDir/tools/checkstyle/google_checks.xml")
}

tasks.register("checkstyleMain", Checkstyle) {
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/*Test.java'
    exclude '**/annotation/*.java'
    classpath = files()
    reports {
        xml.required.set(false)
        html.required.set(true)
    }
    // Set this to true until we fix our current errors.
    ignoreFailures = true
}

spotbugs {
    toolVersion = '3.1.10'
    includeFilter = file("$rootDir/tools/findbugs/findbugs.xml")
}

tasks.register("spotbugsMain", SpotBugsTask) {
    dependsOn tasks.matching { it.name.startsWith("assemble") }

    // Set this to true until we fix our current errors.
    ignoreFailures = true
    effort = "max"
    reportLevel = "medium"

    classes.setFrom(fileTree("build/intermediates/javac/debug/classes/"))
    source.setFrom(fileTree("src/main/java"))
    classpath.setFrom(files())

    projectName = project.name
    release = VERSION_NAME
    reports.html.required = true
    reports.html.outputLocation = project.layout.buildDirectory.file("reports/spotbugs/main/spotbugs.html").get().asFile
    reports.html.stylesheet = 'fancy-hist.xsl'
}

jacoco {
    toolVersion = '0.8.6'
}

tasks.register("jacocoTestReport", JacocoReport) {
    dependsOn "test"

    reports {
        xml.required.set(false)
        csv.required.set(false)
        html.required.set(true)
        html.outputLocation.set(project.layout.buildDirectory.dir("jacocoHtml"))
    }
}
// adds checkstyle task to existing check task
afterEvaluate {
    if (tasks.named("check")) {
        check.dependsOn("checkstyleMain")
        check.dependsOn("spotbugsMain")
    }
}
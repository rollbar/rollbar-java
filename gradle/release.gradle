apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: "de.marcphilipp.nexus-publish"

nexusPublishing {
    repositories {
        sonatype {
            clientTimeout = Duration.ofMinutes(5)
            connectTimeout = Duration.ofMinutes(5)
        }
    }
}

afterEvaluate {
    if (project.parent != null && !project.parent.name.equals("examples") && !project.name.contains('examples')) {
        if (!project.hasProperty('android')) {
            publishing {
                task sourcesJar(type: Jar, dependsOn: classes) {
                    archiveClassifier.set('sources')
                    from sourceSets.main.allSource
                }

                task javadocJar(type: Jar, dependsOn: javadoc) {
                    archiveClassifier.set('javadoc')
                    from javadoc.destinationDir
                }

                publications {
                    maven(MavenPublication) {
                        // Applies the component for the release build variant.
                        from components.java

                        groupId GROUP
                        version VERSION_NAME

                        artifact sourcesJar
                        artifact javadocJar

                        pom {
                            versionMapping {
                                usage('api') {
                                    fromResolutionOf('runtimeClasspath')
                                }
                                usage('java-runtime') {
                                    fromResolutionResult()
                                }
                            }
                            name = POM_NAME
                            description = POM_DESCRIPTION
                            url = POM_URL

                            scm {
                                url = POM_SCM_URL
                                connection = POM_SCM_CONNECTION
                                developerConnection = POM_SCM_DEV_CONNECTION
                            }
                            licenses {
                                license {
                                    name = POM_LICENCE_NAME
                                    url = POM_LICENCE_URL
                                    distribution = POM_LICENCE_DIST
                                }
                            }
                            developers {
                                developer {
                                    id = 'rokob'
                                    name = 'Andrew Weiss'
                                }
                                developer {
                                    id = 'basoko'
                                    name = 'David Basoco'
                                }
                                developer {
                                    id = 'diegov'
                                    name = 'Diego Veralli'
                                }
                            }
                        }
                    }
                }
            }

            signing {
                required true
                useInMemoryPgpKeys(
                        findProperty("signingKey") ?: System.getenv("RELEASE_GPG_PRIVATE_KEY"),
                        findProperty("signingPassword") ?: System.getenv("RELEASE_GPG_PRIVATE_KEY_PASSPHRASE"))
                sign publishing.publications.maven
            }
        }

        if (project.hasProperty("android")) {
            publishing {
                task androidSourcesJar(type: Jar) {
                    archiveClassifier.set('sources')
                    from android.sourceSets.main.java.srcDirs
                }

                task androidJavadocs(type: Javadoc) {
                    source = android.sourceSets.main.java.srcDirs
                    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
                    android.libraryVariants.all { variant ->
                        if (variant.name == 'release') {
                            owner.classpath += variant.javaCompileProvider.get().classpath
                        }
                    }
                    exclude '**/R.html', '**/R.*.html', '**/index.html'
                }

                task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
                    archiveClassifier.set('javadoc')
                    from androidJavadocs.destinationDir
                }

                task androidClassJar(type: Jar) {
                    from 'build/intermediates/classes/release/'
                }

                publications {
                    release(MavenPublication) {
                        from components.release

                        groupId GROUP
                        version VERSION_NAME

                        artifact androidSourcesJar
                        artifact androidJavadocsJar

                        pom {
                            versionMapping {
                                usage('api') {
                                    fromResolutionOf('runtimeClasspath')
                                }
                                usage('java-runtime') {
                                    fromResolutionResult()
                                }
                            }

                            name = POM_NAME
                            description = POM_DESCRIPTION
                            url = POM_URL

                            scm {
                                url = POM_SCM_URL
                                connection = POM_SCM_CONNECTION
                                developerConnection = POM_SCM_DEV_CONNECTION
                            }
                            licenses {
                                license {
                                    name = POM_LICENCE_NAME
                                    url = POM_LICENCE_URL
                                    distribution = POM_LICENCE_DIST
                                }
                            }
                            developers {
                                developer {
                                    id = 'rokob'
                                    name = 'Andrew Weiss'
                                }
                                developer {
                                    id = 'basoko'
                                    name = 'David Basoco'
                                }
                            }
                        }
                    }
                }
                signing {
                    required true
                    useInMemoryPgpKeys(
                        findProperty("signingKey") ?: System.getenv("RELEASE_GPG_PRIVATE_KEY"),
                        findProperty("signingPassword") ?: System.getenv("RELEASE_GPG_PRIVATE_KEY_PASSPHRASE"))
                    sign publishing.publications.release
                }
            }
        }
    }
}


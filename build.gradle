buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "de.marcphilipp.gradle:nexus-publish-plugin:0.4.0"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.2"
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.2.4"
        classpath "com.palantir.gradle.revapi:gradle-revapi:1.4.4"
    }
}

apply plugin: 'io.codearte.nexus-staging'
nexusStaging {
    packageGroup = GROUP
    username = System.getenv('NEXUS_USERNAME')
    password = System.getenv('NEXUS_PASSWORD')
    numberOfRetries = 60
}

allprojects {
    version VERSION_NAME

    repositories {
        google()
        mavenCentral()
        jcenter()
    }
}

subprojects { project ->
    if (!project.name.contains('android') &&
            !project.parent.name.equals("examples") &&
            !project.name.contains('examples')) {
        apply plugin: 'java-library'
        apply from: "$rootDir/gradle/release.gradle"

        apply from: "$rootDir/gradle/quality.gradle"
        
        apply from: "$rootDir/gradle/compatibility.gradle"

        repositories {
            mavenCentral()
        }

        jar {
            manifest {
                attributes(
                        "Implementation-Title": project.name,
                        "Implementation-Version": VERSION_NAME
                )
            }
        }

        dependencies {
            testImplementation group: 'junit', name: 'junit', version: '4.12'
            testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
            testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.28.2'
        }

        compileJava {
            if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_9) >= 0) {
                // Use the --release javac flag, available since JDK9, which is equivalent to setting
                // the source, target, and bootstrap classpath, and catches all usages of stdlib
                // features not available in the target version.
                options.release = 7
            } else {
                sourceCompatibility = JavaVersion.VERSION_1_7
                targetCompatibility = JavaVersion.VERSION_1_7
            }

            if (System.env.JDK7_HOME) {
                options.bootstrapClasspath = files("${System.env.JDK7_HOME}/jre/lib/rt.jar")
            }
        }

        compileTestJava {
            if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_9) >= 0) {
                options.release = 8
            } else {
                sourceCompatibility = JavaVersion.VERSION_1_8
                targetCompatibility = JavaVersion.VERSION_1_8
            }
        }
    }
    
}

wrapper {
    gradleVersion = '6.6'
}

plugins {
    id "com.vmlens.interleave" version "1.1.5"
}

dependencies {
    api project(':rollbar-reactive-streams')

    compileOnly platform('io.projectreactor:reactor-bom:2020.0.6')
    compileOnly 'io.projectreactor.netty:reactor-netty-http'
    compileOnly 'io.projectreactor:reactor-core'

    testImplementation platform('org.junit:junit-bom:5.7.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.platform:junit-platform-launcher'

    testImplementation 'org.apache.httpcomponents.client5:httpclient5:5.0.3'

    testImplementation platform('io.projectreactor:reactor-bom:2020.0.6')
    testImplementation 'io.projectreactor.netty:reactor-netty-http'
    testImplementation 'io.projectreactor:reactor-core'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'io.projectreactor.tools:blockhound:1.0.6.RELEASE'
    testImplementation 'io.projectreactor.tools:blockhound-junit-platform:1.0.6.RELEASE'

    // We'll reuse some of the tests since we're providing compatible implementations
    testImplementation(project(path: ':rollbar-java', configuration: 'integTestRuntime'))
    testImplementation(project(path: ':rollbar-java', configuration: 'integTestArtifacts'))

    testImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8', version: '2.27.2'
    testImplementation group: 'com.google.code.gson', name: 'gson', version: '2.8.2'

    testImplementation('com.vmlens:interleave:1.1.5') {
        exclude group: 'org.apache.maven.plugins', module: 'maven-surefire-plugin'
    }
}

test {
    // Our core suite uses Junit 5 to take advantage of reactor's Blockhound verification.
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }
}

String VMLENS_CATEGORY = 'com.rollbar.reactivestreams.interleave.VMLensTest'

// We reuse some rollbar-java tests since we provide a compatible implementation. Those are JUnit 4 tests so we need
// a JUnit 4 task.
task junit4Test(type: Test) {
    dependsOn project(':rollbar-java').tasks.integTestJar
    useJUnit() {
        // These run with VMLens, as a separate task, so they're excluded here.
        excludeCategories VMLENS_CATEGORY
    }
}

project.tasks.check.dependsOn(junit4Test)

// VMLens based concurrency tests, which run with special instrumentation. VMLens only supports JUnit 4.
interleave {
    useJUnit() {
        includeCategories VMLENS_CATEGORY

        // VMLens occasionally generates invalid bytecode under Java > 8. This will either be fixed,
        // or VMLens will have to be removed. For now we need consistent builds, and the concurrency
        // code we test under Java 8 has the same semantics under Java 11 so testing only Java 8 is
        // an acceptable compromise.
        enabled = JavaVersion.current().compareTo(JavaVersion.VERSION_1_9) < 0
    }

    // The Jacoco agent doesn't get along with the VMLens agent.
    jacoco {
        enabled = false
    }
}

project.tasks.check.dependsOn(interleave)

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.netflix.nebula:nebula-project-plugin:10.0.1"
    }
}

apply plugin: 'com.netflix.nebula.integtest'

configurations {
    integTestArtifacts
    integTestRuntime {
        extendsFrom configurations.integTestImplementation
        canBeConsumed = true
        canBeResolved = true
    }
}

dependencies {
  api project(':rollbar-api')

  api 'org.slf4j:slf4j-api:1.7.25'

  compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

  testImplementation 'com.google.code.gson:gson:2.8.6'

  integTestImplementation 'com.github.tomakehurst:wiremock:2.27.0'
  integTestImplementation 'com.google.code.gson:gson:2.8.2'
}

def VERSION_NAME = project.version ?: 'unspecified'
/**
 * This task will create a version property that is statically referenced when populating the
 * `notifier` section of the payload. It helps when users shade and / or relocate the
 * `rollbar-java` classes, since in those cases we no longer have access to our jar manifest.
 * The task creates a Java class instead of a text resource, since dynamically loaded resources
 * are not as reliable under relocation as a strongly typed bytecode reference to a compiled class.
 */
task createVersionClass {
    ext.OUTPUT_DIR = new File(buildDir, "src/generated/main")

    outputs.dir(ext.OUTPUT_DIR)

  doLast {
    def pkg = ['com', 'rollbar', 'notifier', 'provider', 'notifier']
    def pkgName = pkg.join('.')
    def pkgPath = new File(ext.OUTPUT_DIR.absolutePath + File.separator + pkg.join(File.separator))
    def escapedVersion = VERSION_NAME.replace('\\', '\\\\').replace('"', '\\"')

    def classText = """package ${pkgName};

class VersionHelperResources {
  static String getVersion() {
    return "${escapedVersion}";
  }
}
"""

    pkgPath.mkdirs()
    def classFile = new File(pkgPath, 'VersionHelperResources.java')
    classFile.withWriter { writer ->
      writer << classText
    }
  }
}

sourceSets {
  main {
      java {
          srcDir createVersionClass.ext.OUTPUT_DIR
      }
  }
}

tasks.compileJava.dependsOn(createVersionClass)
tasks.checkstyleMain.dependsOn(createVersionClass)

test {
  // This helps us test the VersionHelper class since there's no jar manifest available when
  // running tests. 
  systemProperty 'ROLLBAR_IMPLEMENTATION_VERSION', VERSION_NAME
}

// The 'java-test-fixtures' plugin is not getting along with 'nebula.integtest', so we'll use this instead
task integTestJar(type: Jar) {
    archiveClassifier.set('integtest')
    from sourceSets.integTest.output
    dependsOn tasks.integTestClasses
}

artifacts {
    integTestArtifacts integTestJar
}

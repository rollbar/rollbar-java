buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.netflix.nebula:nebula-project-plugin:3.4.0"
    }
}

apply plugin: "nebula.integtest"

dependencies {
  api project(':rollbar-api')

  api group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

  compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

  testImplementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

  integTestImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: '2.27.0'
  integTestImplementation group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
}

/**
 * This task will create a version property that is statically referenced when populating the
 * `notifier` section of the payload. It helps when users shade and / or relocate the
 * `rollbar-java` classes, since in those cases we no longer have access to our jar manifest.
 * The task creates a Java class instead of a text resource, since dynamically loaded resources
 * are not as reliable under relocation as a strongly typed bytecode reference to a compiled class.
 */
task createVersionClass() {
  ext.set("OUTPUT_DIR", [buildDir.getAbsolutePath(), 'src', 'generated', 'main'].join(File.separator))

  outputs.dir(ext.OUTPUT_DIR)

  doLast {
    def pkg = ["com", "rollbar", "notifier", "provider", "notifier"];

    def pkgName = pkg.join(".");
    def pkgPath = "${ext.OUTPUT_DIR}${File.separator}${pkg.join(File.separator)}"
    def escapedVersion = VERSION_NAME.replace('\\', '\\\\').replace('"', '\\"');

    def classText = """package ${pkgName};

class VersionHelperResources {
  static String getVersion() {
    return "${escapedVersion}";
  }
}
"""

    new File(pkgPath).mkdirs()
    def classFile = new File(pkgPath, 'VersionHelperResources.java').newWriter()
    try {
      classFile << classText
    } finally {
      classFile.close()
    }
  }
}

sourceSets {
  main {
    java.srcDirs += project.tasks.createVersionClass.ext.OUTPUT_DIR
  }
}

project.tasks.compileJava.dependsOn(project.tasks.createVersionClass);
project.tasks.checkstyleMain.dependsOn(project.tasks.createVersionClass);

test {
  // This helps us test the VersionHelper class since there's no jar manifest available when
  // running tests. 
  systemProperty 'ROLLBAR_IMPLEMENTATION_VERSION', VERSION_NAME
}
